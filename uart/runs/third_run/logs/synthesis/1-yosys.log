
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/uart/src/uart_transceiver.v
Parsing SystemVerilog input from `/openLANE_flow/designs/uart/src/uart_transceiver.v' to AST representation.
Generating RTLIL representation for module `\uart_transceiver'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openLANE_flow/designs/uart/src/uart.v
Parsing SystemVerilog input from `/openLANE_flow/designs/uart/src/uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/uart/runs/third_run/tmp/synthesis/hierarchy.dot'.
Dumping module uart to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \uart
Used module:     \uart_transceiver

4.2. Analyzing design hierarchy..
Top module:  \uart
Used module:     \uart_transceiver
Removed 0 unused modules.

5. Executing TRIBUF pass.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \uart
Used module:     \uart_transceiver

6.1.2. Analyzing design hierarchy..
Top module:  \uart
Used module:     \uart_transceiver
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/uart/src/uart.v:73$27 in module uart.
Marked 4 switch rules as full_case in process $proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15 in module uart_transceiver.
Marked 4 switch rules as full_case in process $proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7 in module uart_transceiver.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:44$2 in module uart_transceiver.
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 2 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
     1/3: $0\csr_do[31:0]
     2/3: $0\thru[0:0]
     3/3: $0\divisor[15:0]
Creating decoders for process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
     1/6: $0\tx_done[0:0]
     2/6: $0\tx_reg[7:0]
     3/6: $0\tx_count16[3:0]
     4/6: $0\tx_bitcount[3:0]
     5/6: $0\tx_busy[0:0]
     6/6: $0\uart_tx[0:0]
Creating decoders for process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
     1/6: $0\rx_done[0:0]
     2/6: $0\rx_reg[7:0]
     3/6: $0\rx_bitcount[3:0]
     4/6: $0\rx_count16[3:0]
     5/6: $0\rx_busy[0:0]
     6/6: $0\rx_data[7:0]
Creating decoders for process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:60$6'.
Creating decoders for process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:44$2'.
     1/1: $0\enable16_counter[15:0]

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart.\divisor' using process `\uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
  created $dff cell `$procdff$237' with positive edge clock.
Creating register for signal `\uart.\csr_do' using process `\uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\uart.\thru' using process `\uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
  created $dff cell `$procdff$239' with positive edge clock.
Creating register for signal `\uart_transceiver.\uart_tx' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$240' with positive edge clock.
Creating register for signal `\uart_transceiver.\tx_done' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$241' with positive edge clock.
Creating register for signal `\uart_transceiver.\tx_busy' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$242' with positive edge clock.
Creating register for signal `\uart_transceiver.\tx_bitcount' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$243' with positive edge clock.
Creating register for signal `\uart_transceiver.\tx_count16' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\uart_transceiver.\tx_reg' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_data' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_done' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_busy' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_count16' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_bitcount' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\uart_transceiver.\rx_reg' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\uart_transceiver.\uart_rx1' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:60$6'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\uart_transceiver.\uart_rx2' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:60$6'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\uart_transceiver.\enable16_counter' using process `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:44$2'.
  created $dff cell `$procdff$254' with positive edge clock.

6.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
Removing empty process `uart.$proc$/openLANE_flow/designs/uart/src/uart.v:73$27'.
Found and cleaned up 6 empty switches in `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
Removing empty process `uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:120$15'.
Found and cleaned up 9 empty switches in `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
Removing empty process `uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:73$7'.
Removing empty process `uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:60$6'.
Found and cleaned up 2 empty switches in `\uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:44$2'.
Removing empty process `uart_transceiver.$proc$/openLANE_flow/designs/uart/src/uart_transceiver.v:44$2'.
Cleaned up 22 empty switches.

6.3. Executing FLATTEN pass (flatten design).
Deleting now unused module uart_transceiver.
<suppressed ~1 debug messages>

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~16 debug messages>

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 2 unused cells and 102 unused wires.
<suppressed ~3 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
checking module uart..
found and reported 0 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\transceiver.$procmux$202: \transceiver.rx_busy -> 1'1
      Replacing known input bits on port A of cell $flatten\transceiver.$procmux$198: \transceiver.rx_busy -> 1'1
      Replacing known input bits on port A of cell $flatten\transceiver.$procmux$195: \transceiver.rx_busy -> 1'1
      Replacing known input bits on port B of cell $flatten\transceiver.$procmux$205: \transceiver.rx_busy -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.7.9. Rerunning OPT passes. (Maybe there is more to do..)

6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.7.13. Executing OPT_DFF pass (perform DFF optimizations).

6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.7.16. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$239 ($dff) from module uart (D = \csr_di [0], Q = \thru).
Adding SRST signal on $procdff$238 ($dff) from module uart (D = $procmux$28_Y, Q = \csr_do, rval = 0).
Adding SRST signal on $procdff$237 ($dff) from module uart (D = $procmux$51_Y, Q = \divisor, rval = 16'0000000000110110).
Adding EN signal on $auto$opt_dff.cc:702:run$265 ($sdff) from module uart (D = \csr_di [15:0], Q = \divisor).
Adding EN signal on $flatten\transceiver.$procdff$251 ($dff) from module uart (D = { \transceiver.uart_rx2 \transceiver.rx_reg [7:1] }, Q = \transceiver.rx_reg).
Adding SRST signal on $flatten\transceiver.$procdff$250 ($dff) from module uart (D = $flatten\transceiver.$procmux$179_Y, Q = \transceiver.rx_bitcount, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$278 ($sdff) from module uart (D = $flatten\transceiver.$procmux$177_Y, Q = \transceiver.rx_bitcount).
Adding SRST signal on $flatten\transceiver.$procdff$249 ($dff) from module uart (D = $flatten\transceiver.$procmux$189_Y, Q = \transceiver.rx_count16, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$286 ($sdff) from module uart (D = $flatten\transceiver.$procmux$187_Y, Q = \transceiver.rx_count16).
Adding SRST signal on $flatten\transceiver.$procdff$248 ($dff) from module uart (D = $flatten\transceiver.$procmux$209_Y, Q = \transceiver.rx_busy, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$292 ($sdff) from module uart (D = $flatten\transceiver.$procmux$207_Y, Q = \transceiver.rx_busy).
Adding SRST signal on $flatten\transceiver.$procdff$247 ($dff) from module uart (D = $flatten\transceiver.$procmux$139_Y, Q = \transceiver.rx_done, rval = 1'0).
Adding EN signal on $flatten\transceiver.$procdff$246 ($dff) from module uart (D = \transceiver.rx_reg, Q = \transceiver.rx_data).
Adding EN signal on $flatten\transceiver.$procdff$245 ($dff) from module uart (D = $flatten\transceiver.$procmux$83_Y, Q = \transceiver.tx_reg).
Adding EN signal on $flatten\transceiver.$procdff$244 ($dff) from module uart (D = $flatten\transceiver.$procmux$91_Y, Q = \transceiver.tx_count16).
Adding SRST signal on $auto$opt_dff.cc:764:run$331 ($dffe) from module uart (D = $flatten\transceiver.$procmux$88_Y, Q = \transceiver.tx_count16, rval = 4'0001).
Adding EN signal on $flatten\transceiver.$procdff$243 ($dff) from module uart (D = $flatten\transceiver.$procmux$101_Y, Q = \transceiver.tx_bitcount).
Adding SRST signal on $auto$opt_dff.cc:764:run$341 ($dffe) from module uart (D = $flatten\transceiver.$procmux$98_Y, Q = \transceiver.tx_bitcount, rval = 4'0000).
Adding SRST signal on $flatten\transceiver.$procdff$242 ($dff) from module uart (D = $flatten\transceiver.$procmux$117_Y, Q = \transceiver.tx_busy, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$343 ($sdff) from module uart (D = $flatten\transceiver.$procmux$117_Y, Q = \transceiver.tx_busy).
Adding SRST signal on $flatten\transceiver.$procdff$241 ($dff) from module uart (D = $flatten\transceiver.$procmux$57_Y, Q = \transceiver.tx_done, rval = 1'0).
Adding SRST signal on $flatten\transceiver.$procdff$240 ($dff) from module uart (D = $flatten\transceiver.$procmux$133_Y, Q = \transceiver.uart_tx, rval = 1'1).
Adding EN signal on $auto$opt_dff.cc:702:run$362 ($sdff) from module uart (D = $flatten\transceiver.$procmux$133_Y, Q = \transceiver.uart_tx).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 47 unused cells and 47 unused wires.
<suppressed ~48 debug messages>

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~5 debug messages>

6.9.9. Rerunning OPT passes. (Maybe there is more to do..)

6.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

6.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

6.9.13. Executing OPT_DFF pass (perform DFF optimizations).

6.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

6.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.9.16. Rerunning OPT passes. (Maybe there is more to do..)

6.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

6.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.9.20. Executing OPT_DFF pass (perform DFF optimizations).

6.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.9.23. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from mux cell uart.$procmux$28 ($pmux).
Removed top 1 bits (of 2) from port B of cell uart.$procmux$30_CMP0 ($eq).
Removed top 16 bits (of 32) from FF cell uart.$auto$opt_dff.cc:702:run$264 ($sdff).
Removed top 1 bits (of 5) from port B of cell uart.$auto$opt_dff.cc:218:make_patterns_logic$345 ($ne).
Removed top 1 bits (of 3) from port B of cell uart.$auto$opt_dff.cc:218:make_patterns_logic$317 ($ne).
Removed top 1 bits (of 4) from port B of cell uart.$auto$opt_dff.cc:218:make_patterns_logic$315 ($ne).
Removed top 1 bits (of 5) from port B of cell uart.$auto$opt_dff.cc:218:make_patterns_logic$313 ($ne).
Removed cell uart.$flatten\transceiver.$procmux$185 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$175 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$172 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$130 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$128 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$114 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$112 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$110 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$107 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$98 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$96 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$88 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$80 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$78 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$76 ($mux).
Removed cell uart.$flatten\transceiver.$procmux$73 ($mux).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:140$19 ($add).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:137$17 ($add).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:93$12 ($add).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:90$10 ($add).
Removed top 15 bits (of 16) from port B of cell uart.$flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:48$4 ($sub).
Removed top 15 bits (of 16) from port B of cell uart.$flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:46$3 ($sub).
Removed top 1 bits (of 8) from wire uart.$flatten\transceiver.$procmux$73_Y.
Removed top 1 bits (of 8) from wire uart.$flatten\transceiver.$procmux$76_Y.
Removed top 1 bits (of 8) from wire uart.$flatten\transceiver.$procmux$78_Y.
Removed top 1 bits (of 8) from wire uart.$flatten\transceiver.$procmux$80_Y.
Removed top 16 bits (of 32) from wire uart.$procmux$28_Y.

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module uart:
  creating $macc model for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:137$17 ($add).
  creating $macc model for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:140$19 ($add).
  creating $macc model for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:90$10 ($add).
  creating $macc model for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:93$12 ($add).
  creating $macc model for $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:46$3 ($sub).
  creating $macc model for $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:48$4 ($sub).
  creating $alu model for $macc $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:48$4.
  creating $alu model for $macc $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:46$3.
  creating $alu model for $macc $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:93$12.
  creating $alu model for $macc $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:90$10.
  creating $alu model for $macc $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:140$19.
  creating $alu model for $macc $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:137$17.
  creating $alu cell for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:137$17: $auto$alumacc.cc:485:replace_alu$375
  creating $alu cell for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:140$19: $auto$alumacc.cc:485:replace_alu$378
  creating $alu cell for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:90$10: $auto$alumacc.cc:485:replace_alu$381
  creating $alu cell for $flatten\transceiver.$add$/openLANE_flow/designs/uart/src/uart_transceiver.v:93$12: $auto$alumacc.cc:485:replace_alu$384
  creating $alu cell for $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:46$3: $auto$alumacc.cc:485:replace_alu$387
  creating $alu cell for $flatten\transceiver.$sub$/openLANE_flow/designs/uart/src/uart_transceiver.v:48$4: $auto$alumacc.cc:485:replace_alu$390
  created 6 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$324 ($dffe) from module uart (D = \csr_di [7], Q = \transceiver.tx_reg [7], rval = 1'0).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.15.9. Rerunning OPT passes. (Maybe there is more to do..)

6.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

6.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.15.13. Executing OPT_DFF pass (perform DFF optimizations).

6.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.15.16. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~7 debug messages>

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
No more expansions possible.
<suppressed ~646 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~333 debug messages>

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 41 unused cells and 371 unused wires.
<suppressed ~42 debug messages>

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\uart' to `<abc-temp-dir>/input.blif'..
Extracted 405 gates and 492 wires to a netlist network with 85 inputs and 75 outputs.

6.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:            ANDNOT cells:       98
ABC RESULTS:               MUX cells:       42
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:       24
ABC RESULTS:               NOT cells:       20
ABC RESULTS:                OR cells:       63
ABC RESULTS:             ORNOT cells:       24
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:       38
ABC RESULTS:        internal signals:      332
ABC RESULTS:           input signals:       85
ABC RESULTS:          output signals:       75
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~12 debug messages>

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

6.24.3. Executing OPT_DFF pass (perform DFF optimizations).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 1 unused cells and 305 unused wires.
<suppressed ~4 debug messages>

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \uart

6.25.2. Analyzing design hierarchy..
Top module:  \uart
Removed 0 unused modules.

6.26. Printing statistics.

=== uart ===

   Number of wires:                338
   Number of wire bits:            539
   Number of public wires:          37
   Number of public wire bits:     211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                418
     $_ANDNOT_                      98
     $_AND_                          9
     $_DFFE_PP_                     24
     $_DFF_P_                       18
     $_MUX_                         42
     $_NAND_                        10
     $_NOR_                         20
     $_NOT_                         19
     $_ORNOT_                       24
     $_OR_                          58
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PP0P_                  7
     $_SDFFCE_PP1P_                  1
     $_SDFFE_PP0N_                   1
     $_SDFFE_PP0P_                  21
     $_SDFFE_PP1P_                   5
     $_SDFF_PP0_                    18
     $_XNOR_                         4
     $_XOR_                         38

6.27. Executing CHECK pass (checking for obvious problems).
checking module uart..
found and reported 0 problems.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 11 unused wires.
<suppressed ~11 debug messages>

10. Printing statistics.

=== uart ===

   Number of wires:                327
   Number of wire bits:            492
   Number of public wires:          26
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                418
     $_ANDNOT_                      98
     $_AND_                          9
     $_DFFE_PP_                     24
     $_DFF_P_                       18
     $_MUX_                         42
     $_NAND_                        10
     $_NOR_                         20
     $_NOT_                         19
     $_ORNOT_                       24
     $_OR_                          58
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PP0P_                  7
     $_SDFFCE_PP1P_                  1
     $_SDFFE_PP0N_                   1
     $_SDFFE_PP0P_                  21
     $_SDFFE_PP1P_                   5
     $_SDFF_PP0_                    18
     $_XNOR_                         4
     $_XOR_                         38

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module uart..
  Treeifying 42 MUXes:
    Found tree with 1 MUXes at root \uart_tx.
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][15].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[0].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][3].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][1].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[2].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][0].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][12].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][2].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][4].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][5].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][13].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][14].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[3].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[4].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][11].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[5].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][10].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][6].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][8].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][7].
    Found tree with 2 MUXes at root $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][9].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[1].
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$207_Y.
    Found tree with 1 MUXes at root $abc$1707$flatten\transceiver.$procmux$83_Y[6].
    Found tree with 1 MUXes at root $abc$1707$new_n422_.
    Finished treeification: Found 26 trees.
  Covering trees:
    Replaced tree at \uart_tx: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$0\enable16_counter[15:0][9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$207_Y: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$flatten\transceiver.$procmux$83_Y[6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1707$new_n422_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~699 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
Using template \$_MUX_ for cells of type $_MUX_.
No more expansions possible.
<suppressed ~45 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mariam/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\uart':
  mapped 96 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

21. Printing statistics.

=== uart ===

   Number of wires:                610
   Number of wire bits:            775
   Number of public wires:          26
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                532
     $_ANDNOT_                      98
     $_AND_                          9
     $_MUX_                        114
     $_NAND_                        10
     $_NOR_                         20
     $_NOT_                         19
     $_ORNOT_                       24
     $_OR_                          58
     $_XNOR_                         4
     $_XOR_                         38
     sky130_fd_sc_hd__dfxtp_2       96
     sky130_fd_sc_hd__mux2_1        42

[INFO]: ABC: WireLoad : S_0

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\uart' to `/tmp/yosys-abc-OibYfs/input.blif'..
Extracted 394 gates and 506 wires to a netlist network with 110 inputs and 116 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-OibYfs/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-OibYfs/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-OibYfs/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/uart/runs/third_run/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/uart/runs/third_run/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    7.77 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/uart/runs/third_run/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/uart/runs/third_run/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 6 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + map -p -B 0.2 -A 0.9 -M 0 
ABC: The cell areas are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.20).
ABC: + retime -D -D 10000 
ABC: + buffer -N 4 -S 1000.0 
ABC: + upsize -D 10000 
ABC: Current delay (1454.45 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    434 ( 30.0 %)   Cap = 10.7 ff (  7.1 %)   Area =     3469.58 ( 68.4 %)   Delay =  1505.98 ps  (  7.1 %)               
ABC: Path  0 --      93 : 0    2 pi                         A =   0.00  Df =  16.5  -10.9 ps  S =  30.8 ps  Cin =  0.0 ff  Cout =  13.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     234 : 2    3 sky130_fd_sc_hd__nor2_2    A =   6.26  Df = 171.7 -104.6 ps  S = 181.6 ps  Cin =  4.4 ff  Cout =  14.5 ff  Cmax = 141.9 ff  G =  317  
ABC: Path  2 --     236 : 2    4 sky130_fd_sc_hd__nand2_2   A =   6.26  Df = 270.4 -121.7 ps  S =  85.6 ps  Cin =  4.4 ff  Cout =  12.9 ff  Cmax = 295.7 ff  G =  277  
ABC: Path  3 --     240 : 2    2 sky130_fd_sc_hd__nor2_2    A =   6.26  Df = 404.6 -203.5 ps  S = 101.3 ps  Cin =  4.4 ff  Cout =   6.6 ff  Cmax = 141.9 ff  G =  145  
ABC: Path  4 --     314 : 1    4 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 581.2 -255.6 ps  S = 160.7 ps  Cin =  2.1 ff  Cout =  12.9 ff  Cmax = 130.0 ff  G =  594  
ABC: Path  5 --     395 : 1    4 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 774.6 -302.4 ps  S = 169.0 ps  Cin =  2.1 ff  Cout =  13.6 ff  Cmax = 130.0 ff  G =  627  
ABC: Path  6 --     397 : 5    4 sky130_fd_sc_hd__o2111ai_2 A =  15.01  Df = 932.2 -353.0 ps  S = 196.0 ps  Cin =  4.3 ff  Cout =   7.9 ff  Cmax = 129.1 ff  G =  172  
ABC: Path  7 --     408 : 1    4 sky130_fd_sc_hd__buf_1     A =   3.75  Df =1112.2 -293.4 ps  S = 228.1 ps  Cin =  2.1 ff  Cout =  18.7 ff  Cmax = 130.0 ff  G =  836  
ABC: Path  8 --     423 : 4    1 sky130_fd_sc_hd__a211oi_2  A =  12.51  Df =1506.0 -218.1 ps  S = 374.2 ps  Cin =  4.4 ff  Cout =  17.6 ff  Cmax =  88.8 ff  G =  405  
ABC: Start-point = pi92 (\transceiver.enable16_counter [1]).  End-point = po30 ($auto$rtlil.cc:2290:MuxGate$2195).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  110/  116  lat =    0  nd =   434  edge =   1004  area =1676.76  delay =1036.36  lev = 10
ABC: + write_blif /tmp/yosys-abc-OibYfs/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a41oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o41ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       15
ABC RESULTS:        internal signals:      280
ABC RESULTS:           input signals:      110
ABC RESULTS:          output signals:      116
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 697 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
checking module uart..
Warning: Wire uart.\uart_tx is used but has no driver.
Warning: Wire uart.\tx_irq is used but has no driver.
Warning: Wire uart.\rx_irq is used but has no driver.
Warning: Wire uart.\csr_do [31] is used but has no driver.
Warning: Wire uart.\csr_do [30] is used but has no driver.
Warning: Wire uart.\csr_do [29] is used but has no driver.
Warning: Wire uart.\csr_do [28] is used but has no driver.
Warning: Wire uart.\csr_do [27] is used but has no driver.
Warning: Wire uart.\csr_do [26] is used but has no driver.
Warning: Wire uart.\csr_do [25] is used but has no driver.
Warning: Wire uart.\csr_do [24] is used but has no driver.
Warning: Wire uart.\csr_do [23] is used but has no driver.
Warning: Wire uart.\csr_do [22] is used but has no driver.
Warning: Wire uart.\csr_do [21] is used but has no driver.
Warning: Wire uart.\csr_do [20] is used but has no driver.
Warning: Wire uart.\csr_do [19] is used but has no driver.
Warning: Wire uart.\csr_do [18] is used but has no driver.
Warning: Wire uart.\csr_do [17] is used but has no driver.
Warning: Wire uart.\csr_do [16] is used but has no driver.
Warning: Wire uart.\csr_do [15] is used but has no driver.
Warning: Wire uart.\csr_do [14] is used but has no driver.
Warning: Wire uart.\csr_do [13] is used but has no driver.
Warning: Wire uart.\csr_do [12] is used but has no driver.
Warning: Wire uart.\csr_do [11] is used but has no driver.
Warning: Wire uart.\csr_do [10] is used but has no driver.
Warning: Wire uart.\csr_do [9] is used but has no driver.
Warning: Wire uart.\csr_do [8] is used but has no driver.
Warning: Wire uart.\csr_do [7] is used but has no driver.
Warning: Wire uart.\csr_do [6] is used but has no driver.
Warning: Wire uart.\csr_do [5] is used but has no driver.
Warning: Wire uart.\csr_do [4] is used but has no driver.
Warning: Wire uart.\csr_do [3] is used but has no driver.
Warning: Wire uart.\csr_do [2] is used but has no driver.
Warning: Wire uart.\csr_do [1] is used but has no driver.
Warning: Wire uart.\csr_do [0] is used but has no driver.
found and reported 35 problems.

29. Printing statistics.

=== uart ===

   Number of wires:                563
   Number of wire bits:            638
   Number of public wires:          89
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                588
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a211oi_2      14
     sky130_fd_sc_hd__a21bo_2        3
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2         8
     sky130_fd_sc_hd__a21oi_2        6
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a22oi_2        8
     sky130_fd_sc_hd__a2bb2oi_2      1
     sky130_fd_sc_hd__a31oi_2        8
     sky130_fd_sc_hd__a41oi_2        2
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        11
     sky130_fd_sc_hd__and4_2        11
     sky130_fd_sc_hd__buf_1         90
     sky130_fd_sc_hd__conb_1        16
     sky130_fd_sc_hd__dfxtp_2       96
     sky130_fd_sc_hd__inv_2         40
     sky130_fd_sc_hd__mux2_1        42
     sky130_fd_sc_hd__mux2_2         3
     sky130_fd_sc_hd__nand2_2       37
     sky130_fd_sc_hd__nand3_2       21
     sky130_fd_sc_hd__nand3b_2      24
     sky130_fd_sc_hd__nor2_2        43
     sky130_fd_sc_hd__nor2b_2        7
     sky130_fd_sc_hd__nor3_2        23
     sky130_fd_sc_hd__nor3b_2        2
     sky130_fd_sc_hd__o2111a_2       2
     sky130_fd_sc_hd__o2111ai_2      5
     sky130_fd_sc_hd__o211a_2        6
     sky130_fd_sc_hd__o211ai_2       4
     sky130_fd_sc_hd__o21a_2         4
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2ai_2      3
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__o41ai_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__xnor2_2        5
     sky130_fd_sc_hd__xor2_2        15

   Chip area for module '\uart': 6044.547200

30. Executing Verilog backend.
Dumping module `\uart'.

Warnings: 35 unique messages, 35 total
End of script. Logfile hash: 1353631f48, CPU: user 1.70s system 0.04s, MEM: 45.32 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 30% 2x abc (0 sec), 23% 4x stat (0 sec), ...
